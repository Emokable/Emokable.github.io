<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哈姆詤的箌悝糖</title>
  
  
  <link href="https://wwww.emokable.top/atom.xml" rel="self"/>
  
  <link href="https://wwww.emokable.top/"/>
  <updated>2023-01-19T16:39:17.892Z</updated>
  <id>https://wwww.emokable.top/</id>
  
  <author>
    <name>emokable</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年我Steam玩了什么游戏</title>
    <link href="https://wwww.emokable.top/2022%E5%B9%B4%E6%88%91Steam%E7%8E%A9%E4%BA%86%E4%BB%80%E4%B9%88%E6%B8%B8%E6%88%8F/"/>
    <id>https://wwww.emokable.top/2022%E5%B9%B4%E6%88%91Steam%E7%8E%A9%E4%BA%86%E4%BB%80%E4%B9%88%E6%B8%B8%E6%88%8F/</id>
    <published>2023-01-19T09:55:30.000Z</published>
    <updated>2023-01-19T16:39:17.892Z</updated>
    
    <content type="html"><![CDATA[<p>2022年买了不少游戏,大多成了<code>藏品</code>,没有太多想玩的欲望,<del>什么电子杨伟</del>,如果只是要单纯的列个表格出来,倒显得无趣了,我就简单聊一聊我玩过的印象比较深的游戏吧.</p><h2 id="一-上半年—疫情—轻薄本扛大旗"><a href="#一-上半年—疫情—轻薄本扛大旗" class="headerlink" title="一.上半年—疫情—轻薄本扛大旗"></a>一.上半年—疫情—轻薄本扛大旗</h2><p>2022年对于我来说可以简单分为上半年和下半年,上半年上海疫情闹得纷纷扬扬,我在宿舍差不多关了3个月,饭菜口味差天天吃盒饭,足不出户也洗不了澡,简直地狱.我在宿舍也只有一个轻薄本可玩…基本与3A无缘.</p><p>不过amd核显科技还是牛的,我应该还在打黑暗之魂3,5700U这样一个低压zen2 cpu居然也能40帧(中低画质)左右,我这样这样玩到黑魂一周目含环印城和画中世界DLC完结差不多80多个小时,期间还和两个室友三人行联机爽歪歪.</p><p>后面乘着打折入了只狼,帧数就挺惨了,只有30帧不到,再加上操作不习惯,实在蚌埠住,打到蝴蝶夫人就弃了.</p><hr><p>后面的明天接着聊了,折腾太晚了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022年买了不少游戏,大多成了&lt;code&gt;藏品&lt;/code&gt;,没有太多想玩的欲望,&lt;del&gt;什么电子杨伟&lt;/del&gt;,如果只是要单纯的列个表格出来,倒显得无趣了,我就简单聊一聊我玩过的印象比较深的游戏吧.&lt;/p&gt;
&lt;h2 id=&quot;一-上半年—疫情—轻薄本扛大旗&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="杂谈" scheme="https://wwww.emokable.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="总结" scheme="https://wwww.emokable.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="steam" scheme="https://wwww.emokable.top/tags/steam/"/>
    
    <category term="游戏" scheme="https://wwww.emokable.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="娱乐" scheme="https://wwww.emokable.top/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>高通410Wifi棒子折腾记录</title>
    <link href="https://wwww.emokable.top/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>https://wwww.emokable.top/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-15T08:19:49.000Z</published>
    <updated>2023-01-19T16:22:39.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-外观及拆解"><a href="#一-外观及拆解" class="headerlink" title="一.外观及拆解"></a>一.外观及拆解</h2><p>这个随身wifi淘宝购入,花费14.5大洋,算不上车价,我也是突发兴趣去买的.不过看这个棒子早己被各路大佬玩开花了,我弄这个也没啥技术含量,没有卡槽就没必要搞基带了,只刷个debian,就当是分享经验算了…..</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/%E5%A4%96%E8%A7%82.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="淘宝普通版样子"></p><p>用螺丝刀拧开两个小螺丝</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/1.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="拧完还得用力掰开"></p><p>然后查看板子丝印,这一步是为了确定我们要刷的包,410的棒子大致有UFI001,UFI002,UFI003等种类</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/2.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="这个是UFI001C,居然印在天线上,虽然直觉告诉我应该在pcb上"></p><p>然后我们可以看一下他的CPU,拆开最大的屏蔽罩,确定是高通410,旁边是金士顿的什么颗粒(应该是4G的硬盘)</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/3.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="MSM8916就是高通410"> </p><p>我买的运气不好,没有卡槽,除非自己焊一个上去(我一个软件学生表示不会),否则不能用自己卡,旁边按钮是复位键,待会儿进入9008模式需要用</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/4.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="小黑块是esim卡"></p><p>棒子的具体配置：</p><table><thead><tr><th>项目</th><th>参数</th></tr></thead><tbody><tr><td>CPU</td><td>Qualcomm Snapdragon MSM8916 Cortex-A53 × 4 @ 1.2GHz</td></tr><tr><td>RAM</td><td>512MB</td></tr><tr><td>ROM</td><td>4G</td></tr><tr><td>备注</td><td>CPU 即高通骁龙 410，是采用 28nm 工艺制程的 64 位 4 核处理器</td></tr></tbody></table><p>这个cpu性能大致和树莓派3+接近…</p><h2 id="二-备份"><a href="#二-备份" class="headerlink" title="二.备份"></a>二.备份</h2><p>所需软件链接: <a href="https://pan.baidu.com/s/1eiWrcMONoO8jDhCxfVlKMg">https://pan.baidu.com/s/1eiWrcMONoO8jDhCxfVlKMg</a> 提取码: dttr </p><h4 id="1-首先在电脑上安装9008驱动"><a href="#1-首先在电脑上安装9008驱动" class="headerlink" title="1.首先在电脑上安装9008驱动"></a>1.首先在电脑上安装9008驱动</h4><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117223914238.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="这个好像是vivo做的,我已经安好了"></p><p>有了驱动才能进入9008模式，我们才能备份</p><h4 id="2-下载好两个备份-x2F-刷写软件"><a href="#2-下载好两个备份-x2F-刷写软件" class="headerlink" title="2.下载好两个备份&#x2F;刷写软件"></a>2.下载好两个备份&#x2F;刷写软件</h4><p>在我们真正刷写前,先做好备份,避免刷机变砖</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117224000999.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="高通工具,使用前需破解注册码"></p><p>两个软件都可以备份,miko可以生成单个文件的救砖包，高通那个可以单独对分区备份和写入</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117224511592.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="还是按照压缩包内说明来"></p><p>首先保持按住wifi棒子上的复位键，插入电脑的usb口，驱动正确的情况下，打开电脑的设备管理器，端口栏会出现这个9008的标识。</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117225211339.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="我把棒子装回去了，懒得再拆开，这图是借别人的演示一下"></p><p>此时wifi棒子不会发光。</p><p>如果想单独对分区操作，进入高通软件，点击QUalcomn-&gt;partition-&gt;do job(scan)</p><p>成功后，左侧会显示棒子信息，右侧会出现棒子自带安卓系统的分区，点击需要操作的分区，选择backup(备份)或者write(写入)，我们就可以操作了（注意先scan再操作）.</p><p>如果想玩安卓，但棒子默认没开adb，也可以从这里提取system文件，利用rom操作软件直接添加环境变量再写入（我的棒子就是，但我通过这番操作已经开了adb了），可以参考这个up的视频<a href="https://www.bilibili.com/video/BV1C24y1Q7fN?share_source=copy_web">https://www.bilibili.com/video/BV1C24y1Q7fN?share_source=copy_web</a></p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117225509245.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="image-20230117225509245"></p><p>miko软件的使用也类似，在9008模式下。</p><p>选择Read，Partition Backup&#x2F;Flash，选择生成路径，点击Load Partition Structure，再点击Read Full Image生成emmc全备份文件格式.bin，之后玩砖了直接刷进去就行。</p><blockquote><p> 如果要插卡玩，记得备份基带。                                                                                                                                           </p></blockquote><h2 id="三-debian刷入"><a href="#三-debian刷入" class="headerlink" title="三.debian刷入"></a>三.debian刷入</h2><p>酷安大佬<a href="https://www.coolapk.com/feed/36547490?shareKey=MDk1MjQ1Zjg1OTk1NjJkZjYzMDg">苏苏小亮亮</a>的debian和openwrt固件</p><p>刷之前先确定棒子已开启adb，使用命令 <code>adb devices</code> 查看连接的adb设备，如果报错说明驱动未安装，那就先安装驱动，如果为空行，说明棒子没开adb</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117231839232.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="大概这样就行"></p><p>然后下载对应固件包，解压</p><p>点击flash.bat</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117231937534.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="这里"></p><p>点开效果，如果adb连上了会帮你开启bootloader，我这是早就弄完的了，所以没有别的显示，如果正常随后一直按提示回车就安装好了</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117232031519.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="大概这样"></p><p>此时使用<code>adb shell</code>指令便可直接连上linux了，但我们的目的还没有完全实现，目前还不能通过ip来访问</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117232531490.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="还没结束"></p><p>再次打开设备管理器，我们会发现其他设备一栏有警告</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117232626780.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="RNDIS错误"></p><p>右键属性选择更新驱动，浏览电脑-&gt;可用程序列表中选择</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117232803601.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="image-20230117232803601"></p><p>网络适配器-&gt;microsoft-&gt;基于NDIS，直接安装</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117233053865.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="需要找一找"></p><p>装完后就能识别了</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117233219642.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="OK"></p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117233238272.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="出现网络了"></p><p>我们直接在cmd输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">192.168.68.1</span><br></code></pre></td></tr></table></figure><p>默认密码为1</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117233419537.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="image-20230117233419537"></p><p>成功连上！之后就用<code>nmtui</code>命令联网，当作正常linux系统使用就行了</p><p><img src="/%E9%AB%98%E9%80%9A410Wifi%E6%A3%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230117233535156.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="image-20230117233535156"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-外观及拆解&quot;&gt;&lt;a href=&quot;#一-外观及拆解&quot; class=&quot;headerlink&quot; title=&quot;一.外观及拆解&quot;&gt;&lt;/a&gt;一.外观及拆解&lt;/h2&gt;&lt;p&gt;这个随身wifi淘宝购入,花费14.5大洋,算不上车价,我也是突发兴趣去买的.不过看这个棒子早己被各</summary>
      
    
    
    
    <category term="技术" scheme="https://wwww.emokable.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随身wifi" scheme="https://wwww.emokable.top/tags/%E9%9A%8F%E8%BA%ABwifi/"/>
    
    <category term="debian" scheme="https://wwww.emokable.top/tags/debian/"/>
    
    <category term="刷机" scheme="https://wwww.emokable.top/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Emokable的从零搭建Hexo博客记录</title>
    <link href="https://wwww.emokable.top/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <id>https://wwww.emokable.top/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-10T12:15:37.000Z</published>
    <updated>2023-01-19T16:18:50.550Z</updated>
    
    <content type="html"><![CDATA[<p>​截止到2023年1月10日,我搭建好这个博客有好几天了,最近也忙着在增改博客的功能.我尽量用简单的语言,记录一下我的工作, 如果大佬看到能给出一点建议就更好了.</p><h2 id="一-安装node-js-使用npm本地安装hexo博客"><a href="#一-安装node-js-使用npm本地安装hexo博客" class="headerlink" title="一.安装node.js ,使用npm本地安装hexo博客"></a>一.安装node.js ,使用npm本地安装hexo博客</h2><p>​首先是在笔记本上下载好node.js,官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> ,直接一路点点点,就行.我之前也在linux弄过,应该是把压缩包git下来,解压安装,总是还挺麻烦.</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110202228211.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="node.JS官网"></p><p>安装完成后,检查是否正确安装,<code>node -v</code> 和 <code>npm -v</code> 查看版本号</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110202950770.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="还要配置环境变量"></p><p>调用下述指令安装hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>可以使用<code>hexo -v</code> 查看是否安装</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110204426640.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="会出现以下信息,就安装成功了"></p><p>自定位置,使用 <code>hexo init blog</code> 创建blog文件夹,并初始化</p><p>可以试试 <code>hexo -g</code> 静态部署,以及 <code>hexo -s</code> 开始本地服务器, 之后跳转到 <a href="http://localhost:4000/">http://localhost:4000</a> 查看本地网页,之后写完博客,也可以这样预览.</p><p><code>hexo new XXX(名字)</code> 就可以在本地,\source_posts\下生成同名md文件了, </p><p>然后就可以愉快的用Typora等编辑器写作了,不过此时博客还在本地,我们还需要借助github(或者gitee等类似网站来托管)</p><h2 id="二-部署hexo-静态博客-到github"><a href="#二-部署hexo-静态博客-到github" class="headerlink" title="二. 部署hexo 静态博客 到github"></a>二. 部署hexo 静态博客 到github</h2><p>这里我选择的是github, 主要是gitee pages开启需要实名认证,大概要等个一两天才能通过,之后的网站更新还需要手动去仓库刷新,不像github提交hexo -d 后自动就给网页更新了,总之,在网络条件允许的情况下,还是建议github.</p><p>首先要有个github 账号,新建一个XXX.github.io的仓库(xxx和账户同名),类型选公开,即public</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110205344341.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="这样的就行"></p><p>点开setting下左侧栏的Pages页面,应该会有类似的提示,</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110205619529.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="这样就说明个人网站ok了"></p><p>但目前为止我们还没有把本地的hexo博客和github结合起来,别急,接着编辑我们新建的blog文件夹下的</p><p><code>_config.yml</code>文件,拉到最底层,做如下修改, repo地址为自己仓库的地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"> type:</span> git<br><span class="hljs-symbol"> repo:</span> git@github.com:Emokable/Emokable.github.io.git<br><span class="hljs-symbol"> branch:</span> main<br></code></pre></td></tr></table></figure><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110210250253.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="位置在这里"></p><p>如果没有设置过git ,还需要配置账号,生成ssh密钥</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config –<span class="hljs-keyword">global</span> <span class="hljs-keyword">user</span>.name yourname<br>git config –<span class="hljs-keyword">global</span> <span class="hljs-keyword">user</span>.email yourname@mail.com<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">yourname@</span>mail.com<br></code></pre></td></tr></table></figure><p>之后用cat命令打开生成的id_rsa.pub文件,复制下来,粘贴到github里</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110210722512.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="在个人中心里SSh and GPG key栏里"></p><p>认证完成后  ssh <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a> 查看是否成功</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110210933475.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="Over!"></p><p>然后安装hexo git 插件</p><p><code>npm install hexo-deployer-git –save</code></p><p>安装完成后, <code>hexo -cl</code>    <code>hexo -g</code>  <code>hexo -v</code> 三连击,上传本地博客,结束!</p><h2 id="三-DLC-1—更换hexo主题"><a href="#三-DLC-1—更换hexo主题" class="headerlink" title="三.DLC  1—更换hexo主题"></a>三.DLC  1—更换hexo主题</h2><p>正所谓科技以换皮为主, 一个好的博客 外在同样重要, 可以到官方的<a href="https://hexo.io/themes/index.html">主题站</a>去挑选喜欢的样式</p><p>我选择的是比较简约的fluid主题,当然还有别的好看的比如NexT,Butterfly之类的,配置方法参考各自的配置文档就行.</p><p>不过我现在用的fluid设置都还没吃透,就不详细讲了,有空再说吧…</p><h2 id="四-DLC-2—图文结合的博客"><a href="#四-DLC-2—图文结合的博客" class="headerlink" title="四.DLC  2—图文结合的博客"></a>四.DLC  2—图文结合的博客</h2><p>我是使用typora写作的,其实也还挺容易.先到<code>_config.yml</code>里修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>新建博客的时候同时创建用于存储图片的同名文件夹,再如下修改typora的偏好设置</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110213928382.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="偏好设置里改一下"></p><p>这样写作的时候直接往typora里添加文件,图片就能直接自动添加到我们生成的同名文件夹里了,写完保存后,执行三连指令,我们的图片就出现在博客正文里了.</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110214332671.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="都在里面"></p><p>不过我看网上还有图床cdn之类的优化方法,我还没有研究过,就先放着这里,等我弄懂了再细说</p><hr><blockquote><p>2023&#x2F;1&#x2F;12</p><p>图床的原理我基本明白了,最简单的就是直接在github建个仓库就行,使用picgo配置好仓库和上传图片的文件夹,同时typora里也要更改,自定义域名采用cdn加速格式：<a href="https://cdn.jsdelivr.net/gh/username/repo%EF%BC%8Cusername%E4%B8%BAGitHub%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%8Crepo%E4%B8%BA%E6%96%B0%E5%BB%BA%E7%9A%84%E4%BB%93%E5%BA%93%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87,%E6%88%91%E6%9A%82%E6%97%B6%E8%BF%98%E6%B2%A1%E6%9C%89%E6%9B%B4%E6%94%B9%E7%9A%84%E5%BF%85%E8%A6%81,%E6%AF%95%E7%AB%9F%E7%8E%B0%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B9%9F%E5%B7%B2%E7%BB%8F%E9%87%87%E7%94%A8%E5%85%A8%E5%B1%80cdn%E5%8A%A0%E9%80%9F%E4%BA%86,%E5%90%8E%E7%BB%AD%E6%9C%89%E5%85%B4%E8%B6%A3%E6%88%91%E4%BC%9A%E8%80%83%E8%99%91%E4%BF%AE%E6%94%B9%E3%80%82">https://cdn.jsdelivr.net/gh/username/repo，username为GitHub用户名，repo为新建的仓库，用于存储图片,我暂时还没有更改的必要,毕竟现在网页也已经采用全局cdn加速了,后续有兴趣我会考虑修改。</a></p></blockquote><blockquote><p>2023&#x2F;1&#x2F;11:</p><h3 id="新增了压缩插件的使用-这个插件可以压缩图片-css-js-html加快博客加载速度"><a href="#新增了压缩插件的使用-这个插件可以压缩图片-css-js-html加快博客加载速度" class="headerlink" title="- 新增了压缩插件的使用,这个插件可以压缩图片,css,js,html加快博客加载速度"></a>- 新增了压缩插件的使用,这个插件可以压缩图片,css,js,html加快博客加载速度</h3><p>在博客根目录执行指令:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-<span class="hljs-keyword">all</span>-minifier <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后果不其然的安装报错了……(忘了截图了)</p><p>尝试换到cnpm淘宝版</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm -registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org  <span class="hljs-comment">#安装cnpm</span><br>cnpm install hexo-all-minifier --save    <br></code></pre></td></tr></table></figure><p>我只是换成cnpm就成功了,其他人如果安装失败也可以试试</p><p>然后在根目录_comfig.yml里增加</p><p>在博客根目录的站点配置文件<code>_config.yml</code>里添加配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># minifier</span><br><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">html_minifier:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">ignore_error:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">css_minifier:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.css&#x27;</span><br><span class="hljs-attr">js_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.js&#x27;</span><br><span class="hljs-attr">image_minifier:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">interlaced:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">multipass:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">optimizationLevel:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">pngquant:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">progressive:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>我是选择了全部压缩的方案,但这样图片比较多的情况下,hexo g和hexo d的所需的时间会变长</p><p>此外再注意一点就是<code>ignore_error: true</code>这个选项,我选择了忽略错误,否则生成博客时,我的博客主题会在about页报错,运行时无法加载出about页…</p><blockquote><p>此处安装过程参考了<a href="https://www.julydate.com/post/60859300/#%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9"> <strong>七夏浅笑</strong> </a>这篇博客.</p></blockquote></blockquote><h2 id="五-DLC-3—评论区设置"><a href="#五-DLC-3—评论区设置" class="headerlink" title="五.DLC  3—评论区设置"></a>五.DLC  3—评论区设置</h2><p>我所使用的fluid主题里,是预留了评论区的位置的,其他主题应该也类似,只要选择好喜欢的评论插件,填写自己的地址就行.</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230110215330504.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="哈姆的哈比比"></p><p>这里以waline为例,首先去注册 <a href="https://console.leancloud.app/apps">Leanclound</a> 作为评论数据库，在 <a href="https://vercel.com/dashboard">Vercel</a> 上部署服务端。接着就按照 <a href="https://waline.js.org/guide/get-started/#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93">Waline的官方文档</a> 进行操作,挺简单的,这里就懒得写了.</p><p>不过要注意,部署完成后尽快到<code>&lt;serverURL&gt;/ui/register</code> 进行注册,首个注册的人会被设定成管理员,之后也可以到这个界面去管理评论.</p><h2 id="六-DLC-4—看板娘设置"><a href="#六-DLC-4—看板娘设置" class="headerlink" title="六.DLC  4—看板娘设置"></a>六.DLC  4—看板娘设置</h2><p>哇,这个我现在还在搞,留个坑在这里,弄完了再写吧…</p><blockquote><p>2023&#x2F;1&#x2F;11 蚌埠住了,家人们,搞这个直接把hexo搞崩了,又把博客重新部署了一遍😔,心累,下次记得做好备份</p></blockquote><h2 id="七-DLC-5—个性域名和cdn加速"><a href="#七-DLC-5—个性域名和cdn加速" class="headerlink" title="七.DLC  5—个性域名和cdn加速"></a>七.DLC  5—个性域名和cdn加速</h2><p>原来的username.github.io被我换成了现在的emokable.top, 这个域名是namesilo上花1刀买的,可以用支付宝,不过我目前还没有在国内做备案的打算,不然国内找找肯定有更便宜的,这里各家购买方式不一,网上资料也很多,没什么写的必要(偷懒)…</p><p>买完后,进入到域名管理界面</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112111331234.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="类似这种"></p><p>修改A和CNAME类,一个是github的ip,另一个是博客原地址,改完后,在博客本地,新建一个CNAME无后缀文件,里面内容是新申请的域名,比如我就填emokable.top</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112111555108.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="image-20230112111555108"></p><p>最后到GitHub仓库的setting里更改就完成了</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112112237364.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="可能要等一会儿"></p><p>不过这样直接改完会有一点小问题,就是网站ssl证书的问题,浏览器会有隐私提示,非常丑</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112112437197.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="一开始是没有这个🔒符号的"></p><p>我是到cloudflare上开cdn服务自动添加的证书,现在就好看多了</p><p>首先进入官网,添加自己的域名(这里我已经弄好了),然后按着步骤来,中途会教你换一下域名服务器,需要到购买的域名后台去修改.</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112132216980.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="在这里解析原来的域名"></p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112152243896.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="修改域名服务器为这俩"></p><p>之后就算开启了cloudflare的托管服务了,应该会自动安装好证书.</p><h2 id="八-DLC-6—博客备份-防止崩溃"><a href="#八-DLC-6—博客备份-防止崩溃" class="headerlink" title="八.DLC  6—博客备份,防止崩溃"></a>八.DLC  6—博客备份,防止崩溃</h2><p>之前搞崩了一次真的很难受,github仓库里只存了博客网页的文件,而本地文件是没有的,所以重新备份一遍吧</p><p>先创建新的分支</p><ul><li>登录GitHub网站，在博客的仓库下新建一个分支，命名为hexo</li><li>在创建好分支后，在setting中将新建的分支设置为default</li></ul><p>再配置用来备份文件夹</p><p>在本地的任意目录下执行git clone <a href="https://github.com/username/uesrname.github.io.git%EF%BC%8C">https://github.com/username/uesrname.github.io.git，</a><br>将克隆下来的目录中除了.git文件夹外的所有文件删除<br>将本地博客文件夹下除了.deploy_git的其他源文件全部复制过来(如果之前克隆过themes中的主体文件，要将主题文件中的.git目录删除掉)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br>git commit -m &quot;备注&quot;<br>git push<br></code></pre></td></tr></table></figure><p>这样hexo博客的目录就备份好了,之后可以把.git文件夹移回原blog文件夹了,再次pull,重新提交,这样就不需要再弄插件了.</p><p>因为我们博客默认在main分支的,备份是在新建的hexo分区,因此使用hexo d和git push指向的分支各不干扰,写博客的时候正常写就行.</p><h2 id="九-DLC-7—设置博客rss订阅"><a href="#九-DLC-7—设置博客rss订阅" class="headerlink" title="九.DLC  7—设置博客rss订阅"></a>九.DLC  7—设置博客rss订阅</h2><p>简易信息聚合是“Really Simple Syndication”或“Richsite summary”(网站内容摘要)的中文名字。是站点用来和其他站点之间共享内容的一种简易方式。英文缩写为RSS技术。</p><p>RSS是一种信息聚合的技术，是某一站点和其他站点之间共享内容的一种简易信息发布与传递的方式，使得一个网站可以方便的调用其他提供<a href="https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85?fromModule=lemma_inlink">RSS订阅</a>服务的网站内容，从而形成非常高效的信息聚合，让网站发布的内容在更大的范围内传播。他是一种用于共享新闻和其他WEB内容的数据交换规范，也是使用最广泛的一种扩展性标识语言。(<a href="https://baike.baidu.com/item/%E7%AE%80%E6%98%93%E4%BF%A1%E6%81%AF%E8%81%9A%E5%90%88/6453727">粘自百度百科</a>)</p><p>RSS算是比较古老的玩意了,而且需要阅读器支持,我用的是<a href="https://www.innoreader.com/">innoreader</a>,但大多数博客都有,所以我也做一个</p><p>首先安装插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-generator-feed<br></code></pre></td></tr></table></figure><p>然后在主目录下_config.yml添加</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta">#RSS订阅</span><br><span class="hljs-symbol">feed:</span> <br><span class="hljs-symbol">type:</span> atom <span class="hljs-meta">#RSS的类型(atom/rss2)</span><br><span class="hljs-symbol">path:</span> atom.xml <span class="hljs-meta">#文件路径,默认是atom.xml/rss2.xml</span><br><span class="hljs-symbol">limit:</span> <span class="hljs-number">20</span> <span class="hljs-meta">#展示文章的数量,使用0或则false代表展示全部</span><br><span class="hljs-symbol">hub:</span> <br><span class="hljs-symbol">content:</span>  <span class="hljs-meta">#在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false</span><br><span class="hljs-symbol">content_limit:</span> <span class="hljs-number">140</span> <span class="hljs-meta">#指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现</span><br><span class="hljs-symbol">content_limit_delim:</span> <span class="hljs-string">&quot; &quot;</span> <span class="hljs-meta">#上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,防止从中间截断</span><br><span class="hljs-symbol">order_by:</span> -date<br><span class="hljs-symbol">icon:</span> <span class="hljs-meta">#icon.png</span><br></code></pre></td></tr></table></figure><p>这样在我们hexo g的时候就会生成atom.xml文件</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112195456203.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="在/public下"></p><p>然后<a href="https://www.emokable.top/atom.xml">https://www.emokable.top/atom.xml</a> 就是我的rss订阅连接,打开能看到我们的短消息</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112195636748.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="博客的所有内容"></p><p>最后看看阅读器效果</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112200035731.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="文章已经有了"></p><h2 id="十-DLC-8—文章连接生成简化"><a href="#十-DLC-8—文章连接生成简化" class="headerlink" title="十.DLC  8—文章连接生成简化"></a>十.DLC  8—文章连接生成简化</h2><p>主题默认的文章连接是</p><p><code>:year/:month/:day/:tite</code>太长了,所以我最早考虑的是去掉日期(因为文章里面已经有日期了),只保留标题<code>permalink: :title/</code>.</p><p>但是这样虽然看起来简化了,实际上中文连接在互联网的支持还是不够</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112214112913.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="虽然这样看上去还算正常"></p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112214238904.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="汉字会变成不知所谓的样子"></p><p>考虑过再次更改文章样式,比如换成随机数字字母或者拼音</p><p>参考了这篇博客<a href="https://cungudafa.gitee.io/post/9958.html">cungudafa姑 </a>,但最终还是没有采用……(人就是懒)</p><p><strong>字母</strong>:</p><p>安装插件:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>文章生成处修改为    <code>permalink: :abbrlink.html</code></p><p>在插入处增加代码段:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">alg:</span> crc16<span class="hljs-meta">#算法,默认crc16,可选crc32</span><br><span class="hljs-symbol">rep:</span> hex<span class="hljs-meta">#进制, 默认dec-10进制,可选hex-16进制</span><br></code></pre></td></tr></table></figure><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230112214732469.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="此处修改,不过我最终还是换回去了"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">效果:<br>crc16 <span class="hljs-meta">&amp; hex https:<span class="hljs-comment">//www.emokable.com/66c8.html </span></span><br><br>crc16 <span class="hljs-meta">&amp; dec https:<span class="hljs-comment">//www.emokable.com/65535.html</span></span><br><br>crc32 <span class="hljs-meta">&amp; hex https:<span class="hljs-comment">//www.emokable.com/8ddf18fb.html </span></span><br><br>crc32 <span class="hljs-meta">&amp; dec https:<span class="hljs-comment">//www.emokable.com/1690090958.html</span></span><br></code></pre></td></tr></table></figure><p><strong>拼音:</strong></p><p>安装插件: </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-permalink-pinyin <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在下方相同位置插入</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">permalink_pinyin:</span><br><span class="hljs-symbol">enable:</span> true<br><span class="hljs-symbol">separator:</span> <span class="hljs-string">&#x27;-&#x27;</span><span class="hljs-meta">#间隔符</span><br></code></pre></td></tr></table></figure><p>但最后我还是都没采用,因为我试了一下,网页是可以正常生成的,但是图片连接出了问题(我是引用的本地图片),最后懒得去矫正了,如果在写博客之前就修改应该是不错的选择.</p><h2 id="十一-DLC-9—添加站点运行时间"><a href="#十一-DLC-9—添加站点运行时间" class="headerlink" title="十一.DLC  9—添加站点运行时间"></a>十一.DLC  9—添加站点运行时间</h2><p>经常看到别人的博客下面都会有显示站点时间的字段,这既反映了博客搭建的历史,和博主的用心程度.所以我也搞一个.</p><p>不需要安装什么插件,直接进入博客主题目录下的这个路径</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230113131305582.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="不是fluid主题的按自己的来"></p><p>然后修改footer.esj,注意还是要根据博客主题找到恰当位置来改</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230113131655975.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="fluid要改的在footer文件里"></p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230113131731088.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="一个是数据,一个是备案信息,我们修改数据就行了"></p><p>直接在末尾插入下述代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sitetime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">javascript</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">siteTime</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;siteTime()&quot;</span>, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> seconds = <span class="hljs-number">1000</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> minutes = seconds * <span class="hljs-number">60</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> hours = minutes * <span class="hljs-number">60</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> days = hours * <span class="hljs-number">24</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> years = days * <span class="hljs-number">365</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todayYear = today.<span class="hljs-title function_">getFullYear</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todayMonth = today.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-number">1</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todayDate = today.<span class="hljs-title function_">getDate</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todayHour = today.<span class="hljs-title function_">getHours</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todayMinute = today.<span class="hljs-title function_">getMinutes</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> todaySecond = today.<span class="hljs-title function_">getSeconds</span>();</span><br><span class="language-javascript"><span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span><br><span class="hljs-comment"><span class="language-javascript">year - 作为date对象的年份，为4位年份值</span></span><br><span class="hljs-comment"><span class="language-javascript">month - 0-11之间的整数，做为date对象的月份</span></span><br><span class="hljs-comment"><span class="language-javascript">day - 1-31之间的整数，做为date对象的天数</span></span><br><span class="hljs-comment"><span class="language-javascript">hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span><br><span class="hljs-comment"><span class="language-javascript">minutes - 0-59之间的整数，做为date对象的分钟数</span></span><br><span class="hljs-comment"><span class="language-javascript">seconds - 0-59之间的整数，做为date对象的秒数</span></span><br><span class="hljs-comment"><span class="language-javascript">microseconds - 0-999之间的整数，做为date对象的毫秒数</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> t1 = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">UTC</span>(<span class="hljs-number">2023</span>,<span class="hljs-number">01</span>,<span class="hljs-number">09</span>,<span class="hljs-number">15</span>,<span class="hljs-number">00</span>,<span class="hljs-number">00</span>); <span class="hljs-comment">//北京时间2023年1月9日</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> t2 = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">UTC</span>(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diff = t2-t1;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diffYears = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(diff/years);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diffDays = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((diff/days)-diffYears*<span class="hljs-number">365</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diffHours = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((diff-(diffYears*<span class="hljs-number">365</span>+diffDays)*days)/hours);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diffMinutes = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((diff-(diffYears*<span class="hljs-number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> diffSeconds = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((diff-(diffYears*<span class="hljs-number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sitetime&quot;</span>).<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot; 存活&quot;</span>+<span class="hljs-comment">/*diffYears+&quot; 年 &quot;+*/</span>diffDays+<span class="hljs-string">&quot; 天 &quot;</span>+diffHours+<span class="hljs-string">&quot; 小时 &quot;</span>+diffMinutes+<span class="hljs-string">&quot; 分钟 &quot;</span>+diffSeconds+<span class="hljs-string">&quot; 秒&quot;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title function_">siteTime</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>效果如下:</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230113132446163.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="小站建立不久,历史底蕴尚浅"></p><p>突然发现fluid的<a href="https://hexo.fluid-dev.com/posts/fluid-footer-custom/">官方博客</a>也有这个功能的实现,我换成另一个版本的时间统计了.</p><p><img src="/Emokable%E7%9A%84%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/image-20230113160744449.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="俩都可以用"></p><h2 id="十二-DLC-10—添加steam库支持"><a href="#十二-DLC-10—添加steam库支持" class="headerlink" title="十二. DLC  10—添加steam库支持"></a>十二. DLC  10—添加steam库支持</h2><p>本来想写写steam玩了什么游戏的,突然想到再博客里加这个功能,github一搜,便找到一个,这个功能的实现我是照搬的<a href="https://github.com/HCLonely/hexo-steam-games">这个项目</a>,如果感兴趣可以去点个star支持一下原作者.</p><h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法:"></a>安装方法:</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-steam-games <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steam:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># enable: 是否启用</span><br>  <span class="hljs-attr">steamId:</span> <span class="hljs-string">&#x27;76561199236571966&#x27;</span> <span class="hljs-comment">#steam 64位Id,steamId: steam 64位Id(需要放在引号里面，不然会有BUG), 需要将steam库设置为公开！</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-comment">#path: 番剧页面路径，默认steamgames/index.html</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Steam游戏库</span>  <span class="hljs-comment">#该页面的标题</span><br>  <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">#写在页面开头的一段话,支持html语法</span><br>  <span class="hljs-attr">tab:</span> <span class="hljs-string">recent</span>   <span class="hljs-comment">#all或recent, all: 所有游戏, recent: 最近游玩的游戏</span><br>  <span class="hljs-attr">length:</span> <span class="hljs-number">1000</span>  <span class="hljs-comment">#要显示游戏的数量，游戏太多的话可以限制一下</span><br>  <span class="hljs-attr">imgUrl:</span>  <span class="hljs-comment">#图片链接，在quote下面放一张图片，图片链接到Steam个人资料，可留空</span><br>  <span class="hljs-attr">proxy:</span>  <span class="hljs-comment">#如果无法访问steam社区的话请使用代理,这里我采用了和我的clash同样的代理方式</span><br>    <span class="hljs-attr">host:</span>  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  <span class="hljs-comment"># 代理ip或域名</span><br>    <span class="hljs-attr">port:</span>  <span class="hljs-number">7890</span>  <span class="hljs-comment">#代理端口</span><br>  <span class="hljs-attr">extra_options:</span>  <span class="hljs-comment">#此配置会扩展到Hexo的page变量中</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">value</span><br></code></pre></td></tr></table></figure><p>再到主题页的_config.yml里去添加菜单选项,具体操作各异,就不细说了.</p><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法:"></a>使用语法:</h4><p><code>hexo steam -u</code>命令更新steam游戏库数据</p><p><code>hexo steam -d </code>删除游戏库数据</p><p>由于steam日常被墙,<code>hexo steam -u</code>命令获取游戏库数据失败,可以按插件文档操作,手动获取</p><blockquote><ol><li><p>浏览器打开<code>https://steamcommunity.com/profiles/&#123;steamId&#125;/games?tab=&#123;tab&#125;</code>, <code>&#123;steamId&#125;</code>和<code>&#123;tab&#125;</code>分别替换为上面配置中提到的<code>steamId</code>和<code>tab</code></p></li><li><p>网页加载完成后，打开浏览器控制台(按<code>F12</code>)，输入以下代码并回车：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">let script = jQuery(<span class="hljs-string">&#x27;script[language=&quot;javascript&quot;]&#x27;</span>);<br>var games = [];<br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; script.length; i++) &#123;<br>  <span class="hljs-keyword">if</span> (script.e<span class="hljs-string">q(i)</span>.html().includes(<span class="hljs-string">&quot;rgGames&quot;</span>)) &#123;<br>    let rgGames = script.e<span class="hljs-string">q(i)</span>.html().match(<span class="hljs-regexp">/var.*?rgGames.*?=.*?(\[[\w\W]*?\&#125;\&#125;\]);/</span>);<br>    <span class="hljs-keyword">if</span> (rgGames) &#123;<br>      games = JSON.parse(rgGames[<span class="hljs-number">1</span>]);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br>document.write(JSON.stringify(games))<br></code></pre></td></tr></table></figure></li><li><p>将生成的内容复制到<code>博客根目录/node_modules/hexo-steam-games/data/games.json</code>文件内，如果没有对应的文件或目录，请自行创建</p></li></ol></blockquote><blockquote><p>数据拉取失败的问题也通过代理解决了,所以如果不是科学上网估计有些麻烦…我一开始采用手动的方式,同时把两个steam账号的数据手动组合了一下(按照正常的方式应该只能拉取到一个账号的数据),大概之后我懒得自己动手,采用插件方法,只会显示一个账号的数据,不过steam的图片使用了cloudflare的cdn大陆也有加载不出来.</p></blockquote><p><a target="_blank" href="https://steamcommunity.com/profiles/76561198802948600/" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #F6F6F6;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">我的steam账号1号(主要买一些比较贵的游戏)</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>https://steamcommunity.com/profiles/76561198802948600/</span></span></span></a></p><p><a target="_blank" href="https://steamcommunity.com/profiles/76561199236571966/" style="position: relative; display: -webkit-box; display: -webkit-flex; display: -ms-flexbox; display: flex; box-sizing: border-box; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center; width: 390px; min-height: 84px; border-radius: 8px; max-width: 100%; overflow: hidden; margin: 16px auto; padding: 12px 12px 9px 12px; background-color: #F6F6F6;"><span class="LinkCard-contents"><span style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; max-height: 40px; line-height: 1.25; color: #121212;">我的steam账号2号(主要买小游戏)</span><span style="display: -webkit-box; font-size: 13px; height: 18px; line-height: 18px; color: #999; word-break: break-all; text-overflow: ellipsis; overflow: hidden; -webkit-line-clamp: 1; -webkit-box-orient: vertical;"><span style="display: inline-flex; align-items: center;"><svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="14" height="14"><path d="M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z"></path></svg></span><span>https://steamcommunity.com/profiles/76561199236571966/</span></span></span></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	截止到2023年1月10日,我搭建好这个博客有好几天了,最近也忙着在增改博客的功能.我尽量用简单的语言,记录一下我的工作, 如果大佬看到能给出一点建议就更好了.&lt;/p&gt;
&lt;h2 id=&quot;一-安装node-js-使用npm本地安装hexo博客&quot;&gt;&lt;a href=&quot;#一-安</summary>
      
    
    
    
    <category term="技术" scheme="https://wwww.emokable.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="https://wwww.emokable.top/tags/hexo/"/>
    
    <category term="blog" scheme="https://wwww.emokable.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验六-TCP</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/</id>
    <published>2023-01-09T14:22:57.000Z</published>
    <updated>2023-01-12T13:18:59.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件学院实验报告"><a href="#华东师范大学软件学院实验报告" class="headerlink" title="华东师范大学软件学院实验报告"></a>华东师范大学软件学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th><strong>年级</strong>：21级</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：TCP</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：12月22日</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：13:00-14:30</td></tr></tbody></table><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image001.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><ol><li><p>熟悉使用wireshark软件进行抓取TCP数据包 ；</p></li><li><p>分析抓取到的TCP数据包，掌握TCP数据包结构；</p></li><li><p>掌握TCP数据包各字段的含义；</p></li><li><p>掌握TCP连接建立和释放的步骤；</p></li><li><p>掌握TCP数据传输过程；</p></li></ol><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image003.jpg" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><ol><li><p>以<a href="http://old.ecnu.edu.cn/site/xiaoli/2016.jpg%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%BD%BF%E7%94%A8wget%E7%A1%AE%E8%AE%A4URL%E6%9C%89%E6%95%88%EF%BC%8C%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E4%BD%A0%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84URL%EF%BC%9B">http://old.ecnu.edu.cn/site/xiaoli/2016.jpg为例，使用wget确认URL有效，或者使用你感兴趣的URL；</a></p></li><li><p>启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为tcp and host xx.xx.xx，xx.xx.xx是要从中获取内容的服务器名称，如上述例子中的old.ecnu.edu.cn；</p></li><li><p>捕获开始后，重复第一步，重新发送请求；</p></li><li><p>命令完成后，停止捕获。</p></li></ol><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windows10 21H2</p><p>Wireshark-win64-2.0.3</p><p>wget-1.17.1-win64</p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><p>输入wget <a href="http://old.ecnu.edu.cn/site/xiaoli/2016.jpg">http://old.ecnu.edu.cn/site/xiaoli/2016.jpg</a> 确认该链接无效</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image005.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>换一个试试wget <a href="http://staff.ustc.edu.cn/~zuojin/arts/19840205.pdf%EF%BC%88%E9%9A%8F%E4%BE%BF%E6%89%BE%E7%9A%84pdf%E6%96%87%E4%BB%B6%EF%BC%89">http://staff.ustc.edu.cn/~zuojin/arts/19840205.pdf（随便找的pdf文件）</a></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image007.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为tcp and host staff.ustc.edu.cn，我们主要观察客户端与服务器之间的tcp流。如图</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image009.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img">   </p><p>当wget命令结束后，停止wireshark捕获，得到</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image011.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><p>1、根据你的理解，绘制TCP报文段的结构图（包括头部各字段的位置及大小）。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image013.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>源端口2byte -目的端口2byte</p><p>序列号4byte</p><p>确认号4byte</p><p>Flags 2byte 窗口2byte</p><p>检验和2byte 紧急指针2byte （以上位固定首部20byte）</p><p>长度2byte  tcp分段信息1440byte</p><p>Tcp段共计1460字节</p><h3 id="在你捕获到的结果中，找到设置了SYN标志的TCP段及其后的数据包，完成以下问题："><a href="#在你捕获到的结果中，找到设置了SYN标志的TCP段及其后的数据包，完成以下问题：" class="headerlink" title="在你捕获到的结果中，找到设置了SYN标志的TCP段及其后的数据包，完成以下问题："></a><strong>在你捕获到的结果中，找到设置了SYN标志的TCP段及其后的数据包，完成以下问题：</strong></h3><p>1、 绘制三次握手的时序图，直到并包括建立连接后计算机发送的第一个数据包（HTTP GET请求），包括</p><p>•    每个数据段的序列号和Ack标号；</p><p>•    本地计算机发送或接收每个数据段的时间（以毫秒为单位）；</p><p>•    本地计算机从发送SYN段到接收到SYN-ACK段的往返时间；</p><p>2、SYN数据包上携带哪些TCP 选项？</p><p>3、传输完成后，TCP连接会以四次挥手或一端发送RST数据包的方式断开，同1一样，绘制TCP连接释放的时序图（从发出第一个FIN或RST到连接断开为止）。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image014.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image016.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>往返时间12.62ms</p><p>含有以下tcp选项，共12bytes</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image018.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image020.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>找不到四次挥手的数据包，只有两次挥手，重新按照提供的实验案例来分析</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image022.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>   <img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image002.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="docx转md这个表格只能截图了.."></p><ol start="4"><li>观察wireshark生成的IO图表</li></ol><h3 id="在“统计”菜单下，选择“IO图表”，以查看数据包速率。"><a href="#在“统计”菜单下，选择“IO图表”，以查看数据包速率。" class="headerlink" title="在“统计”菜单下，选择“IO图表”，以查看数据包速率。"></a><strong>在“统计”菜单下，选择“IO图表”，以查看数据包速率。</strong></h3><p>•    调整过滤器为“tcp.srcport&#x3D;&#x3D;80”仅查看下载数据包，重新绘图；</p><p>•    调整过滤器为“tcp.dstport&#x3D;&#x3D;80”仅查看上传数据包，重新绘图；</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image031.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>通过你对数据传输的理解，回答以下问题：</strong></p><p>1、    实验中下载的大概速率为多少？（以packets&#x2F;s和bits&#x2F;s为单位）</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image033.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image035.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>下载速率最高100packets&#x2F;s，1.2*10^6bits&#x2F;s</p><p>2、    下载内容（即TCP有效负载）占下载率的百分比是多少？</p><p>筛选srcport&#x3D;&#x3D;80，选取其中一个数据包</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image037.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>1440&#x2F;1494&#x3D;96.64%</p><p>3．实验中上传的大概速率为多少？（以packets&#x2F;s和bits&#x2F;s为单位）</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image039.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>最高18packets&#x2F;s，7800bits&#x2F;s</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%85%AD-TCP/clip_image041.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><ol start="4"><li>如果最近从服务器收到的TCP数据段的序列号是X，那么下一个发送TCP报文中的Ack号是多少？</li></ol><p>X+n，n为数据长度字节数</p><h3 id="在完成本实验后继续探索TCP协议："><a href="#在完成本实验后继续探索TCP协议：" class="headerlink" title="在完成本实验后继续探索TCP协议："></a><strong>在完成本实验后继续探索TCP协议：</strong></h3><p>•    探索TCP的拥塞控制和经典AIMD策略。</p><p>TCP 采用基于窗口的方法进行拥塞控制。该方法属于闭环控制法。TCP发送方维持一个拥塞窗口 CWND (Congestion Window)。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。只要网络没有出现拥塞，拥塞窗口就可以增大，发送更多分组，提高网络的利用率。但只要网络出现拥塞或有可能出现拥塞，减小拥塞窗口，减少分组数，缓解网络拥塞</p><p>更深入地探索TCP的可靠性机制。捕获包括段丢失的TCP连接，查看什么触发重新传输以及何时触发，另外查看往返时间估算工具。</p><p>触发超时重传：发送的请求报文没有到达对方；对方发送的ACK报文没有接收到速重传机制快速重传机制不以时间为驱动,而是以数据驱动为驱动.SACK&#x2F;d-sack，滑动窗口</p><p>•    查看包括SACK在内的选项的使用以了解详细信息。</p><p>SACK是一个TCP的选项，来允许TCP单独确认非连续的片段，用于告知真正丢失的包，只重传丢失的片段。要使用SACK，2个设备必须同时支持SACK才可以，建立连接的时候需要使用SACK Permitted的option，如果允许，后续的传输过程中TCP segment中的可以携带SACK option，这个option内容包含一系列的非连续的没有确认的数据的seq range。 </p><p>•    TCP是Web的基础传输层。可以通过设置并发连接来查看浏览器如何使用TCP。</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a><strong>六、总结</strong></h2><p>学会通过 Wireshark 获取 TCP 消息，对TCP的连接（三次握手）和释放过程（四次挥手）有了更深的理解。了解了TCP数据包各字段的含义，掌握了TCP连接建立和释放的步骤，掌握了TCP数据传输阶段的过程。对TCP包头的结构更了解了。不过在实验抓包中发现有些http链接抓不到四次挥手，于是也部分借用了标准案例里的抓包来分析。</p><p>还有就是i&#x2F;o图表还是有些不一样，总感觉很怪。</p><hr><p>这个系列就到此为止,这学期操作系统的资料在学校电脑上而且很烦杂,回家懒得弄了…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验五-UDP</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/</id>
    <published>2023-01-09T14:17:22.000Z</published>
    <updated>2023-01-12T13:18:59.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件学院实验报告"><a href="#华东师范大学软件学院实验报告" class="headerlink" title="华东师范大学软件学院实验报告"></a>华东师范大学软件学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th><strong>年级</strong>：2021级</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：UDP</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：2022&#x2F;12&#x2F;15</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：2022&#x2F;12&#x2F;15</td></tr></tbody></table><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image001.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><ol><li><p>学会通过Wireshark获取UDP消息</p></li><li><p>掌握UDP数据包结构</p></li><li><p>掌握UDP数据包各字段的含义</p></li><li><p>了解UDP协议适用领域</p></li></ol><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><p>UDP报文头部结构：</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image003.jpg" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windows 10 专业版21H2</p><p>Wireshark-win64-2.0.3</p><p>wget-1.17.1-win64</p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><ol><li>启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为“udp”，关闭混杂模式；</li></ol><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image005.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>   2.点击开始，打开浏览器，在地址栏中输入网址浏览，例如<a href="http://www.baidu.com;/">www.baidu.com；</a> </p><ol start="3"><li><p>打开Wireshark， 停止捕获；</p></li><li><p>查看Wireshark界面中抓取的UDP数据包。</p></li></ol><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image007.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><h3 id="通过查看UDP消息的详细信息，回答以下问题："><a href="#通过查看UDP消息的详细信息，回答以下问题：" class="headerlink" title="通过查看UDP消息的详细信息，回答以下问题："></a><strong>通过查看UDP消息的详细信息，回答以下问题：</strong></h3><p>1、 UDP数据包头中的Length字段包括哪些部分？UDP有效载荷，还是UDP有效载荷加上UDP头部的总长度，还是UDP有效载荷和UDP头部以及低层协议的头部三者总长度？</p><p>UDP数据包头部中的length指的不是UDP有效载荷，而是有效载荷加上UDP头的长度。</p><p>2、 UDP校验和为多少位？</p><p>**<img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image009.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img">**如图，2个字节。</p><p>3、 整个UDP头部的长度为多少字节？</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image011.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>8个字节</p><h3 id="为了了解UDP在实践中是如何进行传输的，观察数据包的IP头部并思考以下问题："><a href="#为了了解UDP在实践中是如何进行传输的，观察数据包的IP头部并思考以下问题：" class="headerlink" title="为了了解UDP在实践中是如何进行传输的，观察数据包的IP头部并思考以下问题："></a><strong>为了了解UDP在实践中是如何进行传输的，观察数据包的IP头部并思考以下问题：</strong></h3><p>1、 将上层协议标识为UDP的IP头部的协议字段值为多少？</p><p> <strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image013.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>UDP值为0x11，十进制17.</p><p>2、查看源IP地址与目的IP地址都不是你的计算机的IP地址的数据包，并给出这些数据包的目的IP地址。</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%94-UDP/clip_image015.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>目的ip：239.255.255.250</p><p>百度得知是由于路由器上开了UPnP服务，而这个服务会用SSDP（简单服务发现协议）就是用239.255.255.250的多播地址端口1900来发现UPnp服务，局域网内某台电脑上如果有UPnP服务，每隔一段时间这台机器就会向该多播地址宣告服务在网络上可取，而发送的方式就是基于UDP的HTTP多播方式。</p><p>3、一般UDP消息的长度为多少？</p><p>标识UDP长度为2个字节，共16位，故最大可有0xffff,65535字节。UDP长度包含20字节的IP头部，故UDP全长不超过65515字节，这其中包含8个字节的UDP头部长度，故实际载荷最大不超过65507字节。</p><h3 id="在完成本实验后继续探索UDP协议："><a href="#在完成本实验后继续探索UDP协议：" class="headerlink" title="在完成本实验后继续探索UDP协议："></a><strong>在完成本实验后继续探索UDP协议：</strong></h3><p>了解基于UDP的应用程序的流量，查看数据包大小和丢失率。</p><p>探索流和实时应用程序，查看哪些使用UDP以及哪些使用TCP进行传输。</p><p>Udp: 面向非连接的(正式通信前不必与对方建立连接，不管对方状态就直接发送，像短信，QQ)，不能提供可靠性、流控、差错恢复功能。</p><p>TCP: 面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源),http使用tcp</p><h2 id="六-个人总结"><a href="#六-个人总结" class="headerlink" title="六.个人总结"></a><strong>六.个人总结</strong></h2><p>这次是在宿舍台式机上做的实验，总算能用以太网</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验四-ARP</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/</id>
    <published>2023-01-09T13:30:37.000Z</published>
    <updated>2023-01-12T13:18:59.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件工程学院实验报告"><a href="#华东师范大学软件工程学院实验报告" class="headerlink" title="华东师范大学软件工程学院实验报告"></a>华东师范大学软件工程学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th>年级：2021级</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：实验四：ARP</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：2022&#x2F;12&#x2F;8</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：13:00</td></tr></tbody></table><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image001.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><ol><li><p>学会通过Wireshark获取ARP消息</p></li><li><p>掌握ARP数据包结构</p></li><li><p>掌握ARP数据包各字段的含义</p></li><li><p>了解ARP协议适用领域</p></li></ol><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><h3 id="获取ARP消息"><a href="#获取ARP消息" class="headerlink" title="获取ARP消息"></a>获取ARP消息</h3><p>1.使用管理员权限打开命令行</p><p>2.输入ipconfig &#x2F;all，可以获得本地计算机的物理地址</p><p>3.输入netstat –r，可以获得本机路由表</p><p>4.输入arp –a，可以查看ARP cache</p><p>5.输入arp –d，可以清空ARP cache</p><h3 id="获取ARP消息-1"><a href="#获取ARP消息-1" class="headerlink" title="获取ARP消息"></a>获取ARP消息</h3><p>1.启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为ARP，将混杂模式设为关闭</p><p>2.点击开始</p><p>3.清空ARP cache</p><p>4.停止捕获</p><p>5.在显示过滤器中输入“eth.addr&#x3D;&#x3D;以太网地址”</p><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windows10 22H2</p><p>Wireshark-win64-2.0.3</p><p>wget-1.17.1-win64</p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><p>打开命令行，输入ipconfig &#x2F;all获得本机物理地址。(笔记本使用wlan网络)</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image003.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>输入netstat –r，获得本机路由表</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image005.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image007.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><ol><li>启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为ARP，将混杂模式设为关闭</li></ol><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image009.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>2.点击开始</p><p>3.输入命令 arp –d ，清空arp存储。然后利用命令arp –a 检查是否成功清空了arp存储</p><p>输入arp –a，查看ARP cache</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image011.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>使用管理员权限打开命令行,才能执行清空arp表的命令</p><p>4.然后浏览任意的网页，促使arp表更新。</p><p>5.在wireshark中捕获了arp报文之后，使用wireshark停止捕获。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image013.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><p>1、通过语句“eth.addr&#x3D;&#x3D;01:02:03:04:05:06”的形式，在wireshark中设置过滤器，找出与自己mac地址相关的arp报文。 Arp报文包括请求报文和应答报文，仔细分析两种报文的格式。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image015.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>请求:</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image017.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>应答:</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image019.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>具体比较第3题有详细分析</p><p>2.画出你的计算机和本地路由间ARP的请求和应答数据包，标记出请求和应答，为每个数据包给出发送者和接受者的MAC和IP地址。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image021.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><ol start="3"><li><p>分析报文，回答问题：</p><p>a.什么样的操作码是用来表示一个请求？应答呢？</p></li></ol><p>Opcode :0x0001表示请求</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image023.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>Opcode :0x0002表示应答</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image024.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>   b.一个请求的ARP的报头有多大？应答呢？</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image026.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>硬件类型：2字节 协议类型：2字节<br> 硬件长度：1字节 协议长度：1字节</p><p>Opcode：2字节   共8字节</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image027.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>硬件类型：2字节 协议类型：2字节<br> 硬件长度：1字节 协议长度：1字节</p><p>Opcode：2字节  共8字节</p><p>   c.对未知目标的MAC地址的请求是什么值？</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image029.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>以太网报头中为ff:ff:ff:ff:ff:ff</p><p>ARP中为00:00:00:00:00:00 <img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E5%9B%9B-ARP/clip_image031.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>d.什么以太网类型值说明ARP是更高一层的协议？</p><p>以太网中的type为ARP，表明ARP为更高一层协议。</p><p>f.ARP应答是广播吗？</p><p>不是,是单播(只有请求是广播)</p><h3 id="在完成本实验后，思考下列问题："><a href="#在完成本实验后，思考下列问题：" class="headerlink" title="在完成本实验后，思考下列问题："></a>在完成本实验后，思考下列问题：</h3><p>去除过滤器，我们发现还有更多的arp报文。请研究这些额外的arp报文中，有什么其他的功能作用。</p><p>这些报文有的是别的主机发起的请求和回复,还有Gratuitous ARP也称为免费ARP。Gratuitous ARP不同于一般的ARP请求，它并不是期待得到IP相应的MAC地址，而是当主机启动的时候，将发送一个Gratuitous arp请求，即请求自己的IP地址的MAC地址.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件工程学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件工程学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件工程学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件工程学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验三-IPV4</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/</id>
    <published>2023-01-09T13:17:25.000Z</published>
    <updated>2023-01-12T13:18:59.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件学院实验报告"><a href="#华东师范大学软件学院实验报告" class="headerlink" title="华东师范大学软件学院实验报告"></a>华东师范大学软件学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th><strong>年</strong>级：2021</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：ipv4</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：2022&#x2F;12&#x2F;1</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：13;00-14;30</td></tr></tbody></table><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image001.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><p>​1、学会通过Wireshark分析ip协议 </p><p>​2、了解IP数据报的组成 </p><p>​3、了解IP各部分的含义</p><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><p>​1、获取IP packets </p><p>​2、分析IP packets </p><p>​3、分析Internet Path </p><p>​4、IP 报头checksum 计算</p><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windows10 22H2</p><p>Wireshark-win64-2.0.3</p><p>wget-1.17.1-win64</p><p><strong>Traceroute工具</strong></p><p><strong>traceroute</strong>，现代Linux系统称为<strong>tracepath</strong>，Windows系统称为<strong>tracert</strong>，是一种电脑网络工具。它可显示数据包在IP网络经过的路由器的IP地址。</p><p>程序是利用增加存活时间（TTL）值来实现其功能的。每当数据包经过一个路由器，其存活时间就会减1。当其存活时间是0时，主机便取消数据包，并发送一个ICMP TTL数据包给原数据包的发出者。</p><p>程序发出的首3个数据包TTL值是1，之后3个是2，如此类推，它便得到一连串数据包路径。注意，IP不保证每个数据包走的路径都一样。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image003.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="https://img-blog.csdn.net/20170301092349308"></p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><h3 id="实验步骤1-捕获IP-Packets"><a href="#实验步骤1-捕获IP-Packets" class="headerlink" title="实验步骤1-捕获IP Packets"></a>实验步骤1-捕获IP Packets</h3><p>​1、 启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为“tcp port 80”，将混杂模式设为关闭,勾选 enable network name resolution.然后开始捕获。</p><p>​2、 打开windows的命令行，在里面输入wget <a href="http://www.sina.com/">www.sina.com</a></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image005.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>​3、停止捕获。</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image007.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><h3 id="实验步骤2-捕获Trace"><a href="#实验步骤2-捕获Trace" class="headerlink" title="实验步骤2-捕获Trace"></a><strong>实验步骤2-捕获Trace</strong></h3><p>​<strong>1.启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为“icmp”，将混杂模式设为关闭,勾选 enable network name resolution.然后开始捕获。</strong></p><p>​<strong>2.执行 tracert <a href="http://www.baidu.com/">www.baidu.com</a> 。</strong></p><p>​<strong>3.</strong> <strong>当命令执行结束，则Wireshake中停止捕获，查看Wireshark界面中的封包列表中如果出现数据包则说明抓包成功；</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image009.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong> </p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image011.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><p>选择你通过Wireshark捕获到任何一个报文，分析其IP报文头部</p><p><strong>1、</strong> 尽量不要打开教科书，请根据抓到的报文，描绘IP报文头的图片，并指出报文中每个fields的含义所在。<img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image013.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>根据wireshark给出的报文结构,从左到右依次可描述为</p><p>版本信息(1-4),头部长度(5-8),服务类型作用域(9-16),总长(17-32),</p><p>标识码(33-34),标志(49-51),段偏移(52-64),</p><p>存活时间(65-72),下一个高层协议(73-80),头部校验和(81-96),</p><p>源地址(97-128),</p><p>目的地址(129-160)</p><h3 id="通过观察Wireshark捕获的报文，来回答下面的问题："><a href="#通过观察Wireshark捕获的报文，来回答下面的问题：" class="headerlink" title="通过观察Wireshark捕获的报文，来回答下面的问题："></a>通过观察Wireshark捕获的报文，来回答下面的问题：</h3><p><strong>1.</strong>   <strong>你的计算机和远程服务器的IP地址是什么？</strong> </p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image015.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>我的计算机ip为172.28.197.154,远程服务器为182.61.200.7</p><p><strong>2.“总长度”字段是否包括IP报头加上IP有效负载，或者仅包括IP有效负载？</strong></p><p>总长度包括ip报头与ip有效载荷。</p><p><strong>3.对于不同的数据包，“标识”字段的值如何变化，还是保持不变？例如，对于TCP连接中的所有数据包，它一直保持相同的值，还是对于每个数据包都不同？双向通信的报文是否相同？如果值发生变化，您能看到任何规律吗？</strong></p><p>标识字段值不相同，不同传输方向上部分相同。IPv4 头部中版本号、头部长度、段偏移这些值不变。IPv4 首部中总长度、标识码、生存时间、源地址、目的地址这些字段的值会变化。</p><h3 id="通过观察Wireshark-捕获的报文，来回答下面的问题："><a href="#通过观察Wireshark-捕获的报文，来回答下面的问题：" class="headerlink" title="通过观察Wireshark 捕获的报文，来回答下面的问题："></a><strong>通过观察Wireshark 捕获的报文，来回答下面的问题：</strong></h3><p><strong>4.</strong>   <strong>从您的计算机发送的数据包的TTL字段的初始值是多少？他们是maximum possible value吗？</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image017.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>我的笔记本TTL初始值为64. TTL字段maximum possible value为255，我的电脑值较低。</p><ol><li><strong>查看数据包时如何判断它是否被分段？</strong></li></ol><p>如果收到的IP报头中Don’t fragment为1，则未分片；如果收到的IP报头中Don’t fragment为0，则分片。如图则分片了。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image018.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>6.</strong>   <strong>IP数据报报头的长度是多少，它是如何被编码进报头长度域的？</strong></p><p>IP数据报报头的长度为20个字节, 头部的前20byte为固定长度，所有IP 数据报必须具有。在头部的固定部分的后面是一些可选字段，其长度是可变的（在图中未画出）。头部中的源地址和目的地址都是IP 协议地址。IP 报头长度域（IHL）以32位字进行计数。当它的值为n时，其所表达的字节数为4n个。本次试验中，报头长度为20&#x2F;4&#x3D;5。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image020.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>观察traceroute的结果图，来进行结果分析：</strong></p><p>   <strong>使用traceroute的结果，绘制网络路径图。</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image021.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong> </p><p><strong>图中，显示您的计算机（放在最左侧）和远程服务器（放在最右侧），均显示IP地址，以及它们之间的路径上的路由器，这些路由器以从本机开始的跳数作为距离编号。您可以在捕获的跟踪数据包中找到计算机和远程服务器的IP地址。</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image023.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p><strong>观察IP报文的校验和：</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image024.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>蓝色部分为ipv4协议位置,得到4500 005c c92a 0000 0e01 f37a ac1c c59a b63d c807(f37a为校验和,求和时舍去),加之和为 checksum&#x3D;40c81,将4加入,得0c85,取反即得到f37a,与实际校验值一致</p><p>1、IP报头的校验和可以用来验证一个数据包是否正确。选择一个从远程服务器发送到本计算机的包，计算它的checksum。在计算过程中，请添加注释，表明每个word对应的字段</p><p>计算对IP首部检验和的算法如下：</p><p>(1）把IP数据包的校验和字段置为0。</p><p>(2）把首部看成以16位为单位的数字组成，依次进行二进制求和（注意：求和时应将最高位的进位保存，所以加法应采用32位加法）。</p><p>(3）将上述加法过程中产生的进位（最高位的进位）加到低16位（采用32位加法时，即为将高16位与低16位相加，之后还要把该次加法最高位产生的进位加到低16位）。</p><p>(4）将上述的和取反，即得到校验和。</p><p>假设：抓个IP数据包，取IP数据报报头部分(20B)，数据如下</p><p> <em>45 00 00 30 80 4c 40 00 80 06 b5 2e d3 43 11 7b cb 51 15 3d</em></p><p>1 、把校验的两个字节变为0。</p><p><em>45 00 00 30 80 4c 40 00 80 06 00 00 d3 43 11 7b cb 51 15 3d</em></p><p>2、 每16位一加</p><p><em>4500 + 0030 + 804c + 4000 + 8006 + 0000 + d343 + 117b + cb51 + 153d &#x3D; 34ace</em></p><p>3、把结果的高16位与低16位相加</p><p><em>0003+4ace&#x3D; 4ad1</em></p><p>4、取反</p><p>4ad1 取反 就是最后的结果</p><h3 id="在完成本实验后探索协议和分层，思考下列问题："><a href="#在完成本实验后探索协议和分层，思考下列问题：" class="headerlink" title="在完成本实验后探索协议和分层，思考下列问题："></a><strong>在完成本实验后探索协议和分层，思考下列问题：</strong></h3><p>•    <strong>了解并尝试使用IPv6。 现代操作系统已经包含对IPv6的支持，因此您可能能够捕获网络上的IPv6流量。您还可以通过tunnels连接到IPv6</strong></p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image026.jpg" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>使用icmp6过滤得到ipv6</p><p><strong><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image028.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></strong></p><p>•    了解tunnels技术。</p><p>•    隧道（Tunnel）技术是一种基于IPv4隧道来传送IPv6数据报文的封装技术。将IPv6包作为无结构意义的数据，封装在IPv4包中，如此穿越IPv4网络进行通信，并且在隧道的两端可以分别对数据报文进行封装和解封装。隧道是一个虚拟的点对点的连接。隧道技术在定义上就是指包括数据封装、传输和解封装在内的全过程。</p><p>•    <strong>了解有关IP的地理位置信息，即IP地址和它对应的地理位置之间的信息</strong>。</p><p>IP地理位置是使用IP地址识别设备（例如移动电话，小工具，笔记本电脑，服务器等）的地理位置,通过学校信息化办公室可以看到我现在笔记本电脑wlan连接网络的IP物理位置是在</p><p>亚洲 中国 上海 上海 华东师范大学 中北校区 校园无线</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%89-IPV4/clip_image030.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>•    <strong>了解IPsec或IP security.它为IP数据包提供机密性和身份验证，通常用作VPN的一部分。</strong></p><p>VPN（Virtual Private Network，虚拟专用网）是一种在公用网络上建立专用网络的技术。它之所以称之为虚拟网，主要是因为VPN的两个节点之间并没有像传统专用网那样使用端到端的物理链路，而是架构在公用网络如Internet之上的逻辑网络，用户数据通过逻辑链路传输。IPsec VPN是指采用IPsec实现远程接入的一种VPN技术，通过在公网上为两个或多个私有网络之间建立IPsec隧道，并通过加密和验证算法保证VPN连接的安全。</p><p>IPsec VPN保护的是点对点之间的通信，通过IPsec VPN可以在主机和主机之间、主机和网络安全网关之间或网络安全网关（如路由器、防火墙）之间建立安全的隧道连接。其协议主要工作在IP层，在IP层对数据包进行加密和验证。</p><p>相对于其他VPN技术，IPsec VPN安全性更高，数据在IPsec隧道中都是加密传输，但相应的IPsec VPN在配置和组网部署上更复杂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验二-Ethernet</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/</id>
    <published>2023-01-09T12:53:20.000Z</published>
    <updated>2023-01-12T13:18:59.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件学院实验报告"><a href="#华东师范大学软件学院实验报告" class="headerlink" title="华东师范大学软件学院实验报告"></a>华东师范大学软件学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th>年级：2021级</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：实验二：Ethernet</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：2022&#x2F;11&#x2F;24</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：2022&#x2F;11&#x2F;24</td></tr></tbody></table><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image001.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><p>​<strong>1</strong>、掌握网络抓包工具Wireshark、网络诊断工具ping的用法；</p><p>​<strong>2</strong>、使用网络诊断工具ping触发网络消息；</p><p>​<strong>3</strong>、使用网络抓包工具Wireshark获取并分析以太网数据帧；</p><p>​<strong>4</strong>、掌握以太网帧的结构；</p><p>​<strong>5</strong>、分析以太网地址范围；</p><p>​<strong>6</strong>、分析以太网的广播帧。</p><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><p>​1、启动Wireshark，在菜单栏的捕获-&gt;选项中进行设置，选择已连接的以太网，设置捕获过滤器为“icmp”，将混杂模式设为关闭,勾选 Resolve MAC addresses然后开始捕获。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image003.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>​2、打开命令行，输入ping <a href="http://www.baidu.com/">www.baidu.com</a>.</p><p>​3、打开Wireshark， 停止捕获。</p><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windows10 22H2</p><p>Wireshark-win64-2.0.3</p><p>wget-1.17.1-win64</p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><ol><li>单播</li></ol><p>设置完wireshark后在windows终端输入ping baidu.com</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image005.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>打开wireshark截获:</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image007.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>2.组播,广播</p><p>​广播：一对所有主机</p><p>​组播：一对部分主机</p><p>使用“<strong>ether multicast</strong>”过滤器开始对广播和多播以太网帧进行捕获，等待30秒记录背景流量，然后停止捕获。(受实验室限制,使用现有抓包)</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image009.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><h3 id="分析以太网单播帧："><a href="#分析以太网单播帧：" class="headerlink" title="分析以太网单播帧："></a><strong>分析以太网单播帧：</strong></h3><p>1.基于对以太网帧格式的理解，绘制ping消息的图形，该图形以字节</p><p>单位显示以太网报头字段的位置和大小。图形可以简单地将框架显示为一个细长的矩形。先出现在包中的是最左边的字段，会先通过网络发送。在此图中，显示以太网报头和以太网负载的范围。最后添加一个虚线框来表示4字节校验和。</p><p>以太网结构图(以抓到的包为例):</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image011.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"> </p><p>2、画一个图,显示你的电脑,路由器和远程服务器的相对位置。标记你的电脑和路由器的以太网地址。标记你的计算机和远程服务器的IP地址。同时也在绘图中显示出以太网和其他网络。</p><p>Icmp包显示地址与本机一致</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image013.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image015.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image017.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>可画出图案:</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image019.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><h3 id="分析以太网广播帧或多播帧的格式回答下面问题："><a href="#分析以太网广播帧或多播帧的格式回答下面问题：" class="headerlink" title="分析以太网广播帧或多播帧的格式回答下面问题："></a><strong>分析以太网广播帧或多播帧的格式回答下面问题：</strong></h3><p>1.以太网广播帧的地址是什么,以Wireshark显示的标准形式写出。</p><p>Broadcast（ff:ff:ff:ff:ff:ff）</p><p>2.哪几个比特位的以太网地址是用来确定是单播或多播&#x2F;广播的?可以根据地址第8位判断是单播还是多播&#x2F;广播。如果为0则是单播，如果为1则是多播。如果地址均为1，即地址为ff.ff.ff.ff.ff.ff，则为广播</p><h3 id="IEEE-802-3数据包分析："><a href="#IEEE-802-3数据包分析：" class="headerlink" title="IEEE 802.3数据包分析："></a><strong>IEEE 802.3数据包分析</strong>：</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image021.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>有两种类型的以太网帧，IEEE 802.3和DIX以太网。 DIX是常见的，也是我们上面实验中用到的，而IEEE 802.3则很少。 您可能会在捕获的抓取的包中看到一些IEEE 802.3帧。要搜索IEEE 802.3数据包，请输入显示过滤器（在Wireshark窗口的顶部面板上方）“ llc“ （小写），因为IEEE 802.3格式在其顶部具有LLC协议。 LLC也存在于IEEE 802.11无线网络之上，但在DIX以太网中却不存在。(如果一直没有IEEE 802.3的数据包，可以打开混杂模式，然后开始捕获。)</p><p>​1.与DIX以太网报头相比，IEEE 802.3和LLC组合报头有多长？您可以使用Wireshark解决此问题。请注意，Trailer &#x2F; Padding和Checksum可能显示为标头的一部分，但它们位于帧的末尾。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image022.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>802.3报头长14字节(目的地址6,源地址6,长度&#x2F;类型2),LCC报头(DSAP 1, SSAP 1, 控制1)3字节,一共17字节</p><ol start="2"><li>接收方计算机如何知道该帧是DIX以太网还是IEEE 802.3？ 提示：您可能需要同时使用Wireshark查看数据包示例并查找相关文献。</li></ol><p>当Type字段值小于等于1500（0x05DC）时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536（0x0600）时，帧使用的是Ethernet II(DIX)格式</p><ol start="3"><li>如果IEEE 802.3没有类型字段，那么如何确定下一层？使Wireshark查找解复用键</li></ol><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%BA%8C-Ethernet/clip_image024.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>802.3没有类型字段,但可以通过长度length来判断,因此0000-05DC都可以看作是802.3的解复用键,此处的解复用键就是0026</p><h2 id="六-个人总结"><a href="#六-个人总结" class="headerlink" title="六.个人总结"></a><strong>六.个人总结</strong></h2><p>这次实验算是做得比较容易的了,但是由于wlan的原因,后面的数据包都用的教材给的,算是丧失了一些实验的乐趣.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>黄豆</title>
    <link href="https://wwww.emokable.top/%E9%BB%84%E8%B1%86/"/>
    <id>https://wwww.emokable.top/%E9%BB%84%E8%B1%86/</id>
    <published>2023-01-09T09:53:13.000Z</published>
    <updated>2023-01-12T13:18:59.511Z</updated>
    
    <content type="html"><![CDATA[<p>😀 😁 😂 🤣 😃 😄 😅 😆 😉 😊 😋 😎 😍 😘 🥰 😗 😙 😚 ☺️ 🙂 🤗 🤩 🤔 🤨 😐 😑 😶 🙄 😏 😣 😥 😮 🤐 😯 😪 😫 😴 😌 😛 😜 😝 🤤 😒 😓 😔 😕 🙃 🤑 😲 ☹️ 🙁 😖 😞 😟 😤 😢 😭 😦 😧 😨 😩 🤯 😬 😰 😱 🥵 🥶 😳 🤪 😵 😡 😠 🤬 😷 🤒 🤕 🤢 🤮 🤧 😇 🤠 🤡 🥳 🥴 🥺 🤥 🤫 🤭 🧐 🤓 😈 👿 👹 👺 💀 👻 👽 🤖 💩 😺 😸 😹 😻 😼 😽 🙀 😿 😾</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;😀 😁 😂 🤣 😃 😄 😅 😆 😉 😊 😋 😎 😍 😘 🥰 😗 😙 😚 ☺️ 🙂 🤗 🤩 🤔 🤨 😐 😑 😶 🙄 😏 😣 😥 😮 🤐 😯 😪 😫 😴 😌 😛 😜 😝 🤤 😒 😓 😔 😕</summary>
      
    
    
    
    <category term="抽象" scheme="https://wwww.emokable.top/categories/%E6%8A%BD%E8%B1%A1/"/>
    
    
    <category term="Emoji" scheme="https://wwww.emokable.top/tags/Emoji/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实践实验一-Protocol-Layer</title>
    <link href="https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/"/>
    <id>https://wwww.emokable.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/</id>
    <published>2023-01-09T05:22:04.000Z</published>
    <updated>2023-01-12T13:18:59.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华东师范大学软件工程学院实验报告"><a href="#华东师范大学软件工程学院实验报告" class="headerlink" title="华东师范大学软件工程学院实验报告"></a>华东师范大学软件工程学院实验报告</h1><table><thead><tr><th><strong>实验课程</strong>：计算机网络实践</th><th><strong>年级</strong>：2021级</th><th><strong>实验成绩</strong>：</th></tr></thead><tbody><tr><td><strong>实验名称</strong>：Protocol Layer</td><td><strong>姓名</strong>：emokable</td><td></td></tr><tr><td><strong>实验编号</strong>：X</td><td><strong>学号</strong>：X</td><td><strong>实验日期</strong>：2022&#x2F;11&#x2F;17</td></tr><tr><td><strong>指导教师</strong>：章玥</td><td><strong>组号</strong>：</td><td><strong>实验时间</strong>：2022&#x2F;11&#x2F;17</td></tr></tbody></table><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><ol><li><p>学习协议和分层如何用数据包表示; </p></li><li><p>熟悉wireshark软件、curl、wget等常用软件的使用，掌握网络抓包的方法，能在所用电脑上进 行抓包; </p></li><li><p>了解IP数据包格式，能应用该软件分析数据包格式，查看抓到的包的内容，并分析对应的IP数据 包格式; </p></li><li><p>抓包分析数据包，估算协议的开销; </p></li><li><p>通过数据包抓取实验，将理论与实践相结合，深入理解协议层的字段与结构特征.</p></li></ol><h2 id="二、实验内容与实验步骤"><a href="#二、实验内容与实验步骤" class="headerlink" title="二、实验内容与实验步骤"></a><strong>二、实验内容与实验步骤</strong></h2><p>1.安装wget和wireshark</p><p>2.使用软件抓包</p><p>3.启动Wireshark点击-&gt;捕获-&gt;选项-&gt;输入tab-&gt;选择本地网卡，过滤条件（所选择接口的捕获过滤 器）为 “tcp port 80”，在选项tab中勾选解析网络名称，点击开始按钮;关闭不必要的浏览器标签和窗口,避免跟踪非目的流量； </p><p>4.在命令行中选取一个URL，用wget获取,打开Wireshark停止捕获。 (我选的网站为<a href="http://www.baidu.com/">http://www.baidu.com</a>)</p><p>5.查看Wireshark界面中的封包列表中如果出现数据包则说明抓包成功； </p><p>6.分析抓包数据的结构</p><h2 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a><strong>三、实验环境</strong></h2><p>Windos10 22h2专业版</p><h2 id="四、实验过程与分析"><a href="#四、实验过程与分析" class="headerlink" title="四、实验过程与分析"></a><strong>四、实验过程与分析</strong></h2><h3 id="抓包结果总览"><a href="#抓包结果总览" class="headerlink" title="抓包结果总览"></a><strong>抓包结果总览</strong></h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image002.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>在抓取HTTP请求的GET方法时，分析其数据包，思考下列问题： </p><p>1、根据抓取的HTTP请求的GET方法的抓取结果，分析协议包的内容。</p><p>2、画一个关于使用GET方法的HTTP请求的图(与下图类似)，为了显示协议层的嵌套结构，请分别标出Ethernet， IP和TCP协议的头部的位置、大小以及其负载的范围。</p><p>3、根据数据包的抓取结果，分析协议开销。</p><p>4、 估计协议的开销或者是协议开销占用下载字节的百分比。对于下载的主要部分中的每一个包，我们需要分析 Ethernet，IP和TCP的开销，和有用的HTTP数据的开销，你认为这种开销是必要的吗？ （假设HTTP数据（头部和消息）是有用的，而TCP，IP和Ethernet头部认为是开销。）</p><p><strong>Ans:</strong></p><p>协议包主要包含以下信息：</p><p>Frame:  物理层的数据帧概况</p><p>Ethernet II: 数据链路层以太网帧头部信息</p><p>Internet Protocol Version 4: 互联网层IP包头部信息</p><p>Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</p><p>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image004.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image006.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image008.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>协议开销为分析 Ethernet，IP和TCP的头部大小之和即14+20+20&#x3D;54</p><p>开销占比:54&#x2F;165*100%&#x3D;32.7%</p><p>这种开销是必要的,因为在网络的各层中存在着许多不同的协议，每个协议的定义与数据的划分都不相同，接收方和发送方的对等实体之间的协议必须保持一致，否则一方将无法识别另一方发出的信息，从而造成不可避免的灾难，增加的协议开销可以保证传输包的安全性和可检测性及可恢复性。</p><h3 id="观察下载的以太网和IP头包回答下面问题"><a href="#观察下载的以太网和IP头包回答下面问题" class="headerlink" title="观察下载的以太网和IP头包回答下面问题"></a><strong>观察下载的以太网和IP头包回答下面问题</strong></h3><p>1、以太网头部中哪一部分是解复用（解复用： 找到正确的上一层协议来处理到达的包的行为叫做 解复用）键并且告知它的下一个高层指的是IP，在这一包内哪一个值可以表示IP？ </p><p>2、IP头部中哪一部分是解复用键并且告知它的下一个高层指的是TCP，在这一包内哪一个值可以表示TCP？</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image010.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image012.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p><strong>Ans:</strong></p><p>分析多路分解键，根据wireshark的功能，可以直接在下拉框找到IP、TCP协议对应的二进制符号</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image014.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p><p>表示IP的解复用键为IPv4(0x0800)</p><p>表示TCP的解复用键为TCP(6)</p><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题:"></a><strong>思考题</strong>:</h3><ol><li><p>这里找到了一个54Bytes大小的tcp数据包，并且不包含更高层数据在TCP协议中，建立连接需要三次握手，结束连接需要4次挥手。这几次的数据传递均是不包括高层协议数据的，目的是为了确保连接建立的稳定和准确<img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E5%AE%9E%E9%AA%8C%E4%B8%80-Protocol-Layer/clip_image016.png" srcset="/img/mahmoud-habibi.gif" lazyload alt="img"></p></li><li><p>MSS是TCP 数据包一次可以传输的最大数据段。在建立连接时二者协商MSS的大小。对于第一个包的首部中，Connection字段值为：keep-alive，表明后续仍有数据。最后一个包请求头中Connection字段值为：close，表明传输结束。同时最后一个包中还会包含FIN&#x3D;1来请求关闭连接</p></li><li><p>加密的目的是为了保密内容，所以加密的类型和加密密钥不能随着加密数据一同发送。加密协议的种类和密钥应该在传输数据前进行协商确定。相较于现有的直接传输，不同加密协议在传输之前需要有额外的数据传输进行密钥的协商，以确保整个加密是有效的</p></li><li><p>和加密不同，压缩是为了节省传输流量，而非对数据保密内容，所以压缩的协议可直接指明在下层协议头中，便于接收方解压</p></li></ol><h2 id="五、实验结果总结"><a href="#五、实验结果总结" class="headerlink" title="五、实验结果总结"></a><strong>五、实验结果总结</strong></h2><p>总的来说,这次实验算是第一次对计算机网络抓包进行研究,一开始还不太清楚自己要做什么,问了助教之后自己又想了一会儿才将抓到的东西和课堂上将过的结构联系起来,然后就比较好分析了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;华东师范大学软件工程学院实验报告&quot;&gt;&lt;a href=&quot;#华东师范大学软件工程学院实验报告&quot; class=&quot;headerlink&quot; title=&quot;华东师范大学软件工程学院实验报告&quot;&gt;&lt;/a&gt;华东师范大学软件工程学院实验报告&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;</summary>
      
    
    
    
    <category term="学习资料" scheme="https://wwww.emokable.top/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机网络实践" scheme="https://wwww.emokable.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
